<%= form_with model: @news, url: news_update_path, method: :patch, local: true, html: { class: "form", multipart: true } do |form| %>

  <!-- Header Section -->
  <div class="form-header">
    <h1 class="page-title">‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≤‡∏£</h1>
    <%= form.submit "+ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≤‡∏£", class: "btn btn-disabled", id: "submit-button" %>
  </div>

  <!-- Title -->
  <div class="form-group">
    <label>‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠</label>
    <%= form.text_field :title, class: "form-control", id: "news_title", placeholder: "Enter news title" %>
  </div>

  <!-- Content -->
  <div class="form-group">
    <label>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î</label>
    <%= form.text_area :content, class: "form-control textarea", id: "news_content", placeholder: "Enter news content" %>
  </div>

  <!-- Category, Publish Date -->
  <div class="form-row">
    <div class="form-group">
      <label>‡∏Å‡∏•‡∏∏‡πà‡∏°</label>
      <% selected_category =
          if @news.is_public?
            "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"
          else
            @news.news_groups.joins(:advisor_group).pluck("advisor_groups.group_name").first
          end
      %>

      <% available_groups =
          if current_user.role.name == '‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö'
            AdvisorGroup.pluck(:group_name)
          else
            AdvisorGroup.joins(:advisor_group_members).where(advisor_group_members: { user_id: current_user.id }).pluck(:group_name)
          end
      %>

      <%= select_tag :category,
          options_for_select(["‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"] + available_groups, selected_category),
          prompt: "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å", class: "form-control select-dropdown", id: "category"
      %>

    </div>
    <div class="form-group">
      <label>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ú‡∏¢‡πÅ‡∏û‡∏£‡πà (‡∏Ñ.‡∏®.)</label>
      <%= form.date_field :publish_date, class: "form-control date-picker", id: "news_publish_date" %>
    </div>
  </div>

  <!-- Image Upload Section -->
  <div class="form-group">
    <label>Upload Images</label>
    <div class="image-upload-container">
      <div class="upload-row">
        <div class="banner-upload">
          <label>Banner Image</label>
          <div class="upload-box large preview-wrapper" onclick="document.getElementById('banner_image_input').click();">
            <% if @news.banner_image.attached? %>
              <%= image_tag @news.banner_image, id: "banner_preview", class: "preview-image" %>
            <% else %>
              <span class="upload-icon">üì§</span>
              <span class="upload-text">Click or drag file</span>
              <span class="upload-info">Recommend size 851 x 315 px</span>
            <% end %>
            <%= form.file_field :banner_image, class: "file-input", id: "banner_image_input", style: "display: none;" %>
          </div>
        </div>

        <div class="gallery-upload">
          <div class="gallery-header">
            <label>More Images</label>
            <span class="gallery-note">(show as gallery)</span>
          </div>
          <div class="upload-box small">
            <span class="upload-icon">+</span>
            <span class="upload-text">Upload multiple images</span>
            <%= form.file_field :more_images, multiple: true, direct_upload: true,
            name: "news[more_images][]", id: "more_images_input" %>
          </div>
          <div class="gallery-preview" id="gallery_preview">
            <% @news.more_images.each do |image| %>
              <div class="image-wrapper existing-image" data-id="<%= image.id %>">
                <%= image_tag image, class: "gallery-image" %>
                <button class="delete-button" data-attachment-id="<%= image.id %>">‡∏•‡∏ö</button>
              </div>
            <% end %>
          </div>
          <div class="gallery-preview" id="new_gallery_preview"></div>
        </div>
      </div>
    </div>
  </div>

<% end %>


<script>
document.addEventListener("DOMContentLoaded", function () {
  const input = document.getElementById("banner_image_input");
  const preview = document.getElementById("banner_preview");

  if (input) {
    input.addEventListener("change", function (e) {
      const file = e.target.files[0];
      if (file) {
        const reader = new FileReader();
        reader.onload = function (event) {
          if (preview) {
            preview.src = event.target.result;
          } else {
            const img = document.createElement("img");
            img.id = "banner_preview";
            img.className = "preview-image";
            img.src = event.target.result;
            input.parentNode.prepend(img);
          }
        };
        reader.readAsDataURL(file);
      }
    });
  }
});
// JavaScript for handling multiple image uploads
let filesBuffer = [];

// ‡∏¢‡πâ‡∏≤‡∏¢ renderPreviews ‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡∏î‡πâ‡∏≤‡∏ô‡∏ô‡∏≠‡∏Å
function renderPreviews() {
  const newPreviewContainer = document.getElementById("new_gallery_preview");
  const input = document.getElementById("more_images_input");

  newPreviewContainer.innerHTML = "";

  filesBuffer.forEach((file, index) => {
    const reader = new FileReader();
    reader.onload = function (event) {
      const wrapper = document.createElement("div");
      wrapper.className = "image-wrapper";

      const img = document.createElement("img");
      img.src = event.target.result;
      img.className = "gallery-image";

      const btn = document.createElement("button");
      btn.innerText = "‡∏•‡∏ö";
      btn.className = "delete-button";
      btn.onclick = function (e) {
        e.preventDefault();
        filesBuffer.splice(index, 1);
        renderPreviews();
      };

      wrapper.appendChild(img);
      wrapper.appendChild(btn);
      newPreviewContainer.appendChild(wrapper);
    };
    reader.readAsDataURL(file);
  });

  const dataTransfer = new DataTransfer();
  filesBuffer.forEach(f => dataTransfer.items.add(f));
  input.files = dataTransfer.files;
}

document.addEventListener("DOMContentLoaded", function () {
  const input = document.getElementById("more_images_input");
  const bannerInput = document.getElementById("banner_image_input");

  input.addEventListener("change", function (e) {
    const newFiles = Array.from(e.target.files);
    const existingImagesCount = document.querySelectorAll(".gallery-preview .existing-image").length;
    const bannerAttached = document.getElementById("banner_preview") ? 1 : 0;

    const totalCount = existingImagesCount + bannerAttached + filesBuffer.length + newFiles.length;

    if (totalCount > 6) {
      alert("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡πÄ‡∏Å‡∏¥‡∏ô 6 ‡∏£‡∏π‡∏õ‡πÑ‡∏î‡πâ");
      return input.value = ""; // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    }

    newFiles.forEach((file) => {
      filesBuffer.push(file);
    });
    renderPreviews();
  });

  // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô banner ‡πÄ‡∏Å‡∏¥‡∏ô‡∏î‡πâ‡∏ß‡∏¢ (‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏°‡∏µ gallery ‡∏´‡∏•‡∏≤‡∏¢‡∏†‡∏≤‡∏û)
  bannerInput.addEventListener("change", function (e) {
    const existingImagesCount = document.querySelectorAll(".gallery-preview .existing-image").length;
    const newGalleryCount = filesBuffer.length;
    const bannerFile = e.target.files.length > 0 ? 1 : 0;

    const totalCount = existingImagesCount + newGalleryCount + bannerFile;

    if (totalCount > 6) {
      alert("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡πÄ‡∏Å‡∏¥‡∏ô 5 ‡∏£‡∏π‡∏õ‡πÑ‡∏î‡πâ");
      bannerInput.value = "";
    }
  });
});


document.addEventListener("DOMContentLoaded", function () {
  const existingDeleteButtons = document.querySelectorAll(".delete-button[data-attachment-id]");

  existingDeleteButtons.forEach((btn) => {
    btn.addEventListener("click", function (e) {
      e.preventDefault();
      const id = btn.dataset.attachmentId;

      fetch(`/news/attachments/${id}`, {
        method: "DELETE",
        headers: {
          "X-CSRF-Token": document.querySelector("meta[name='csrf-token']").content
        }
      }).then(() => {
        btn.closest(".image-wrapper").remove();
      });
    });
  });
});

  document.addEventListener("DOMContentLoaded", function () {
    const requiredFields = ["news_title", "news_content", "category", "news_publish_date"];
    const submitBtn = document.getElementById("submit-button");

    function toggleSubmitButton() {
      const allFilled = requiredFields.every(id => {
        const el = document.getElementById(id);
        return el && el.value.trim() !== "";
      });

      if (allFilled) {
        submitBtn.classList.remove("btn-disabled");
        submitBtn.classList.add("btn-create");
      } else {
        submitBtn.classList.remove("btn-create");
        submitBtn.classList.add("btn-disabled");
      }
    }

    requiredFields.forEach(id => {
      const el = document.getElementById(id);
      if (el) {
        el.addEventListener("input", toggleSubmitButton);
        el.addEventListener("change", toggleSubmitButton);
      }
    });

    toggleSubmitButton(); // Initial check
  });


</script>